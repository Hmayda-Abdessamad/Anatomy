workflow:
  rules:
    - if: $CI_COMMIT_BRANCH != "main" && $CI_PIPELINE_SOURCE != "merge_request_event"
      when: never
    - when: always
variables:
  GATEWAY_URL: http://dev-env-lb-1778191959.eu-north-1.elb.amazonaws.com
  STG_HOST: ec2-16-171-154-87.eu-north-1.compute.amazonaws.com
##
stages:
  - init
  - test
  - build_jar
  - build_image
  - deploy_prod

get-version:
  tags:
    - shell
    - remote
    - ec2
  stage: init
  script:
    - export PACKAGE_VERSION=$(cat pom.xml | grep "^    <version>.*</version>$" | awk -F'[><]' '{print $3}')
    - echo "JAR_VERSION=$PACKAGE_VERSION" >> build.env
  artifacts:
    reports:
      dotenv: build.env

#test:
#  tags:
#    - docker
#    - remote
#  stage: test
#  image: maven:3.9.3-eclipse-temurin-17-alpine
#  script:
#    - mvn test
#  artifacts:
#    when: always
#    reports:
#      junit:
#        - target/test-reports/TEST-*.xml

build_the_jar_file:
  tags:
    - docker
    - remote
  stage: build_image
  dependencies:
    - get-version
  needs:
    - get-version
  image: maven:3.9.3-eclipse-temurin-17-alpine
  script:
    - mvn package -D skipTests
    - echo $JAR_VERSION
  artifacts:
    paths:
      - target/Modelisation-3d-du-corps-humain-$JAR_VERSION.jar

build_the_image:
  tags:
    - shell
    - remote
    - ec2
  stage: build_image
  dependencies:
    - get-version
    - build_the_jar_file
  needs:
    - build_the_jar_file
    - get-version
  before_script:
    - export APP_VERSION=$JAR_VERSION.$CI_PIPELINE_IID
    - export JAR_V=$JAR_VERSION
    - echo $APP_VERSION
    - echo "APP_VERSION=$APP_VERSION" >> build.env
  script:
    - docker build --build-arg JAR_VERSION=$JAR_V -t ${CI_REGISTRY_IMAGE}:$APP_VERSION .
  artifacts:
    reports:
      dotenv: build.env

push_the_image:
  tags:
    - shell
    - remote
    - ec2
  stage: build_image
  dependencies:
    - get-version
    - build_the_image
  needs:
    - get-version
    - build_the_image
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo $APP_VERSION
    - docker push ${CI_REGISTRY_IMAGE}:${APP_VERSION}


deploy_backend_service_to_prod:
  stage: deploy_prod
  extends: .deploy_to_kubernetes
  variables:
    APP_PORT: 8080
    SERVICE_PORT: 8080
    SERVICE_DIR: backend_service
  environment:
    name: stg env
    url: $GATEWAY_URL2

##
.deploy_to_kubernetes:
  stage: deploy_stg
  tags:
    - shell
    - remote
    - ec2
  dependencies:
    - get-version
    - build_the_image
  variables:
    APP_PORT: ""
    SERVICE_PORT: ""
  before_script:
    - chmod 400 $K8S_SSH_KEY
    - export IMAGE_TAG=$APP_VERSION
  script:
    - scp -o StrictHostKeyChecking=no -i $K8S_SSH_KEY -r ./kubernetes ubuntu@$STG_HOST:/home/ubuntu
    - ssh -o StrictHostKeyChecking=no -i $K8S_SSH_KEY ubuntu@$STG_HOST "
      export IMAGE_NAME=${CI_REGISTRY_IMAGE} &&
      export IMAGE_TAG=$IMAGE_TAG &&
      export CONTAINER_PORT=$APP_PORT &&
      export MICROSERVICE_NAME=$(echo "$SERVICE_DIR" | sed 's/_/-/g') &&
      echo $MICROSERVICE_NAME &&
      export SERVICE_TARGET_PORT=$APP_PORT &&
      export SERVICE_NAME=$(echo "$SERVICE_DIR" | sed 's/_/-/g') &&
      export SERVICE_PORT=$SERVICE_PORT &&
      kubectl create secret docker-registry docker-registry-key --docker-server=$CI_REGISTRY --docker-username=$GITLAB_NAME --docker-password=$GITLAB_PASSWD -n microservice-cicd --dry-run=client -o yaml | kubectl --kubeconfig=gitlab-config apply -f - &&
      envsubst < kubernetes/deployment.yml | kubectl --kubeconfig=gitlab-config apply -f - &&
      envsubst < kubernetes/service.yml | kubectl --kubeconfig=gitlab-config apply -f - "
